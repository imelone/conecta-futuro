"use client";

import React, { useState, useRef, useEffect } from "react";
import L from "leaflet";
import MarkerIcon from "../../../../public/marker-icon.png";
import MarkerShadow from "../../../../public/marker-shadow.png";
import "leaflet/dist/leaflet.css";
import "leaflet-routing-machine/dist/leaflet-routing-machine.css";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  useMap,
  ScaleControl,
} from "react-leaflet";
import { Layers } from "./Layers"; // Ensure the correct import path
import "./MapStyles.css";
import { MapContextProvider, useMapContext } from "../mapContext";
import RoutingMachine from "../RoutingMachine"; // Import RoutingMachine

const pointsOfInterest = [
  { name: "Big Ben", lat: 51.5007, lng: -0.1246 },
  { name: "London Eye", lat: 51.5033, lng: -0.1195 },
  { name: "Buckingham Palace", lat: 51.5014, lng: -0.1419 },
];

const Map = () => {
  const [coord, setCoord] = useState<[number, number]>([51.505, -0.09]);
  const [startPoint, setStartPoint] = useState<{ lat: number; lng: number }>({
    lat: 51.505,
    lng: -0.09,
  });
  const [endPoint, setEndPoint] = useState<{ lat: number; lng: number } | null>(
    null
  );
  const mapRef = useRef<L.Map | null>(null);
  const { setMap } = useMapContext();

  const SearchLocation = () => {
    const [location, setLocation] = useState<string>("");

    const handleSearch = async () => {
      if (!location) return;

      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?q=${location}&format=json&limit=1`
      );
      const data = await response.json();
      if (data.length > 0) {
        const newCoord: [number, number] = [
          parseFloat(data[0].lat),
          parseFloat(data[0].lon),
        ];
        setCoord(newCoord);
        if (mapRef.current) {
          mapRef.current.setView(newCoord, mapRef.current.getZoom());
        }
      } else {
        console.log("Location not found");
      }
    };

    return (
      <div className="search-location">
        <input
          type="text"
          placeholder="Search Location"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
        />
        <button onClick={handleSearch}>Search</button>
      </div>
    );
  };

  const GetMyLocation = () => {
    const getMyLocation = () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            console.log("position: ", position.coords);
            const newCoord: [number, number] = [
              position.coords.latitude,
              position.coords.longitude,
            ];
            setCoord(newCoord);
            if (mapRef.current) {
              mapRef.current.setView(newCoord, mapRef.current.getZoom());
            }
          },
          (error) => {
            console.error("Error getting location: ", error);
          }
        );
      } else {
        console.log("Geolocation is not supported by this browser.");
      }
    };

    return (
      <div className="get-my-location">
        <button onClick={getMyLocation}>Get My Location</button>
      </div>
    );
  };

  const SetMapRef = () => {
    const map = useMap();
    useEffect(() => {
      mapRef.current = map;
      setMap(map);
    }, [map]);
    return null;
  };

  const calculateDistance = (
    lat1: number,
    lon1: number,
    lat2: number,
    lon2: number
  ): number => {
    const R = 6371; // Radius of the Earth in kilometers
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(deg2rad(lat1)) *
        Math.cos(deg2rad(lat2)) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const d = R * c; // Distance in kilometers
    return d;
  };

  const deg2rad = (deg: number): number => {
    return deg * (Math.PI / 180);
  };
  const PointList = () => {
    const [distance, setDistance] = useState<number>(0); // State to store the distance entered by the user

    // Function to filter the points based on the distance entered by the user
    const filterPoints = (points: any[]) => {
      return points.filter((point) => {
        // Calculate the distance between the current point and the reference coordinates (coord)
        const dist = calculateDistance(
          point.lat,
          point.lng,
          coord[0],
          coord[1]
        );
        // Return true if the distance is less than or equal to the distance entered by the user
        return dist <= distance;
      });
    };

    return (
      <div className="point-list">
        {/* Input field to enter the distance */}
        <input
          type="number"
          placeholder="Enter distance (in km)"
          value={distance}
          onChange={(e) => setDistance(parseFloat(e.target.value))}
        />
        {/* Display the filtered points */}
        {filterPoints(pointsOfInterest).map((point, index) => (
          <div className="point-card" key={index}>
            <h3>{point.name}</h3>
            <button
              onClick={() => {
                setCoord([point.lat, point.lng]);
                setEndPoint({ lat: point.lat, lng: point.lng });
                if (mapRef.current) {
                  mapRef.current.setView(
                    [point.lat, point.lng],
                    mapRef.current.getZoom()
                  );
                }
              }}
            >
              Go to {point.name}
            </button>
          </div>
        ))}
      </div>
    );
  };

  return (
    <>
      <SearchLocation />
      <GetMyLocation />
      <PointList />
      <MapContainer
        style={{
          height: "100vh",
          width: "100vw",
        }}
        center={coord}
        zoom={13}
        scrollWheelZoom={false}
        whenReady={(map: any) => {
          mapRef.current = map;
        }}
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        <SetMapRef />
        {endPoint && (
          <RoutingMachine startPoint={startPoint} endPoint={endPoint} />
        )}
        {/* {endPoint && (
          <Marker
            icon={
              new L.Icon({
                iconUrl: MarkerIcon.src,
                iconRetinaUrl: MarkerIcon.src,
                iconSize: [25, 41],
                iconAnchor: [12.5, 41],
                popupAnchor: [0, -41],
                shadowUrl: MarkerShadow.src,
                shadowSize: [41, 41],
              })
            }
            position={[endPoint.lat, endPoint.lng]}
          >
            <Popup>{endPoint?.name}</Popup>
          </Marker> */}

        {/* <Marker
          icon={
            new L.Icon({
              iconUrl: MarkerIcon.src,
              iconRetinaUrl: MarkerIcon.src,
              iconSize: [25, 41],
              iconAnchor: [12.5, 41],
              popupAnchor: [0, -41],
              shadowUrl: MarkerShadow.src,
              shadowSize: [41, 41],
            })
          }
          position={coord} // Update the position to use the state value
        >
          <Popup>
            A pretty CSS3 popup. <br /> Easily customizable.
          </Popup>
        </Marker> */}
        <ScaleControl position="topleft" />
        <Layers />
      </MapContainer>
    </>
  );
};

const MapWithProvider = () => (
  <MapContextProvider>
    <Map />
  </MapContextProvider>
);

export default MapWithProvider;
